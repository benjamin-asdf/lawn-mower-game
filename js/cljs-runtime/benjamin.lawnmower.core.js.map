{"version":3,"sources":["benjamin/lawnmower/core.cljs"],"mappings":"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","names":["benjamin.lawnmower.core/lawn-dimensions","benjamin.lawnmower.core/mower-link","p__46986","map__46987","cljs.core/--destructure-map","cljs.core.get","benjamin.lawnmower.core/visit-pieces","player","db","cljs.core.prn","vec__46988","cljs.core.nth","y","x","cljs.core.update_in","cljs.core/constantly","p__46991","vec__46992","benjamin.lawnmower.core/make-lawn","cljs.core.into","iter__5520__auto__","s__46996","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__46998","cljs.core/chunk-buffer","i__46997","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46995","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","s__47000","b__47002","i__47001","iter__46999","s__47004","b__47006","i__47005","iter__47003","benjamin.lawnmower.core/init-db","re_frame.core.reg_event_db","_","benjamin.lawnmower.core/player-ui","p__47007","map__47008","benjamin.lawnmower.core/piece-of-lawn","pos","visited?","cljs.core._EQ_","benjamin.lawnmower.core/lawn-grid","lawn","cljs.core.doall","cljs.core.map","row","p1__47009#","re_frame.core.reg_sub","benjamin.lawnmower.core/game","cljs.core/deref","re_frame.core.subscribe","benjamin.lawnmower.core/capture-key","keycode-map","key-handler","js/goog.events.KeyHandler","js/document","press-fn","key-press","f","goog.events/listen","benjamin.lawnmower.core/start","goog.events.KeyCodes/J","js/console.log","re-frame.core/dispatch","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/UP","goog.events.KeyCodes/K","goog.events.KeyCodes/H","goog.events.KeyCodes/L","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/RIGHT","reagent.dom.render","benjamin.lawnmower.core/init","re-frame.core/dispatch-sync","benjamin.lawnmower.core/stop","benjamin.lawnmower.core/wrap-player-on-board","re-frame.core/enrich","p__47010","map__47011","vec__47012","max-y","max-x","player-x","player-y","cljs.core.assoc","benjamin.lawnmower.core/set-pieces-visited","p__47015","vec__47016","direction","mv","p__47019","vec__47020","G__47023","cljs.core/Keyword","js/Error","cljs.core.update","cljs.core/chunk-first"],"sourcesContent":["(ns\n    benjamin.lawnmower.core\n    (:require\n     [reagent.dom :as rdom]\n     [re-frame.core :as rf]\n     [goog.events.KeyCodes :as keycodes]\n     [goog.events :as gev])\n    (:import [goog.events KeyHandler]))\n\n(def lawn-dimensions [3 3])\n\n(def mower-link\n  ;; \"https://imgur.com/a/7CuJID5\"\n  \"https://i.imgur.com/4SfnQ1I.jpeg\")\n\n(defn\n  visit-pieces\n  [{:game/keys [player] :as db}]\n  (prn \"visit-pieces\" player)\n  (let [[y x] player]\n    (update-in\n     db\n     [:game/lawn y x :lawn-piece/visited?]\n     (constantly true))))\n\n(defn make-lawn\n  [[y x]]\n  (into\n   []\n   (for\n       [y (range y)]\n       (into\n        []\n        (for\n            [x (range x)]\n            {:lawn-piece/pos [y x]\n             :lawn-piece/visited? false})))))\n\n(def init-db\n  (visit-pieces\n   {:game/lawn (make-lawn lawn-dimensions)\n    :game/player [0 0]}))\n\n(rf/reg-event-db\n  :initialize-db\n  (fn [_ _]\n    init-db))\n\n(defn player-ui []\n  [:img\n   {:src mower-link :alt \"foo\"\n    :style\n    {:height 100 :width 100\n     ;; :clip \"rect(0,100,100,100)\"\n     :overflow \"hidden\"}}])\n\n(defn\n  piece-of-lawn\n  [{:lawn-piece/keys [pos visited?]}\n   player]\n  (if\n      (= pos player)\n      (player-ui)\n      [:div\n       {:key pos\n        :style {:height 100\n                :width 100\n                :background (if\n                                visited?\n                                \"yellowgreen\"\n                                \"green\")}}]))\n\n\n(defn lawn-grid [lawn player]\n  (doall\n   (map\n    (fn [row]\n      (doall (map #(piece-of-lawn % player) row)))\n    lawn)))\n\n(comment\n  (piece-of-lawn\n   (ffirst (make-lawn [1 1])) [0 0])\n  (lawn-grid (make-lawn [3 3]) [0 0]))\n\n(rf/reg-sub :game/lawn :game/lawn)\n(rf/reg-sub :game/player :game/player)\n\n(defn game []\n  (let [lawn @(rf/subscribe [:game/lawn])\n        player @(rf/subscribe [:game/player])]\n    [:h1 \"Mawn the lawn\"\n     [:div\n      {:style\n       {:display :grid\n        :width 600\n        :grid-template-rows \"repeat(3, 100px)\"\n        :grid-template-columns \"repeat(3, 100px)\"\n        :grid-auto-flow :column}}\n      (lawn-grid lawn player)]]))\n\n(defn capture-key\n  \"Given a `keycode`, execute function `f` \"\n  [keycode-map]\n  (let [key-handler (KeyHandler. js/document)\n        press-fn (fn [key-press]\n                   (when-let [f (get keycode-map (.. key-press -keyCode))]\n                     (f)))]\n    (gev/listen key-handler\n                (-> KeyHandler .-EventType .-KEY)\n                press-fn)))\n;; start is called by init and after code reloading finishes\n\n(defn ^:dev/after-load start []\n  (capture-key\n   {keycodes/J\n    (fn [] (js/console.log \"hi1\")\n      (rf/dispatch [:player/mv :down]))\n    keycodes/DOWN\n    (fn [] (js/console.log \"hi1\")\n      (rf/dispatch [:player/mv :down]))\n    keycodes/UP\n    (fn []\n      (rf/dispatch [:player/mv :up]))\n    keycodes/K\n    (fn []\n      (rf/dispatch [:player/mv :up]))\n    keycodes/H\n    (fn []\n      (rf/dispatch [:player/mv :left]))\n    keycodes/L\n    (fn []\n      (rf/dispatch [:player/mv :right]))\n    keycodes/LEFT\n    (fn []\n      (rf/dispatch [:player/mv :left]))\n    keycodes/RIGHT\n    (fn []\n      (rf/dispatch [:player/mv :right]))})\n  (rdom/render\n   [game]\n   (.getElementById js/document \"lawnmovergame\")))\n\n(defn init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (rf/dispatch-sync [:initialize-db])\n  (js/console.log \"start\")\n  (start))\n\n\n; this is called before any code is reloaded\n\n(defn ^:dev/before-load stop []\n  (js/console.log \"stop\"))\n\n;; (defn mv-player  )\n\n(def wrap-player-on-board\n  (rf/enrich\n   (fn [{:game/keys [lawn player] :as db} _]\n     (let [max-y (dec (count (first lawn)))\n           max-x (dec (count lawn))\n           [player-x player-y] player]\n       (prn \"wrap: \" player)\n       (assoc\n        db\n        :game/player\n        [(cond\n           (< max-x player-x) 0\n           (< player-x 0) max-x\n           :else player-x)\n         (cond\n           (< max-y player-y) 0\n           (< player-y 0) max-y\n           :else player-y)])))))\n\n(def set-pieces-visited\n  (rf/enrich\n   (fn [db _]\n     (visit-pieces db))))\n\n(rf/reg-event-db\n :player/mv\n [set-pieces-visited wrap-player-on-board]\n (fn [db [_ direction]]\n   (let [mv\n         (fn [[x y]]\n           (case direction\n             :left [(dec x) y] :right [(inc x) y]\n             :down [x (inc y)] :up [x (dec y)]))]\n     (update db :game/player mv))))\n\n\n;; (rf/reg-event-db\n;;  :player/\n;;  [wrap-player-on-board]\n;;  (fn [db [_ direction]]\n;;    (let [mv\n;;          (fn [[x y]]\n;;            (case direction\n;;              :left [(dec x) y] :right [(inc x) y]\n;;              :down [x (inc y)] :up [x (dec y)]))]\n;;      (update db :game/player mv))))\n\n(comment\n  (require '[re-frame.db])\n  (rf/dispatch-sync [:initialize-db])\n  (rf/dispatch-sync [:player/mv :down])\n  (do (rf/dispatch-sync [:player/mv :left])\n      (:game/player @re-frame.db/app-db))\n  (do (rf/dispatch-sync [:player/mv :down])\n      @re-frame.db/app-db)\n  (do (rf/dispatch-sync [:player/mv :left])\n      @re-frame.db/app-db)\n\n\n\n  )\n"]}